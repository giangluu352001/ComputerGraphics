#define _USE_MATH_DEFINES
#include <math.h>
#include <iostream>
#include "supportClass.h"
#include "Mesh.cpp"

using namespace std;

int		screenWidth = 1000;
int		screenHeight = 500;

Mesh	chande;
Mesh	ray1;
Mesh	ray2;
Mesh	tamtruot1;
Mesh	tamtruot2;
Mesh	butve1;
Mesh	butve2;
Mesh	butve3;
Mesh	chot1;
Mesh	thanhlienket;
Mesh	chot2;
Mesh	giado1;
Mesh	giado2;

bool	isColor = true;
bool	isViewing = true;

float	minRayPosY = 0.6 + 0.18 * 2, chot1PosY = 0.6 + 0.18 * 2;
float	butve1PosY = 0.6 + 0.18 * 2;

float minYEllipse = 0.6 + 0.18 * 2, maxYEllipse = 3.5;
float minXEllipse = minYEllipse - maxYEllipse, maxXEllipse = maxYEllipse - minYEllipse;
float centerXEllipse = 0, centerYEllipse = minYEllipse + (maxYEllipse - minYEllipse) / 2;
float centerZEllipse = 0.6 + 0.1 * 2 + 0.3 + 0.09, butve3X = 0.0, butve3Y = 1.5 * 0.96;
float radiusX = maxXEllipse, radiusY = radiusX / 2;
float butve2Angle = -90, butve2PosY = 0.18 * 2 + 0.6;

float camera_angle;
float camera_height;
float camera_dis;
float camera_X, camera_Y, camera_Z;
float lookAt_X, lookAt_Y, lookAt_Z;

void drawAxis()
{
	glBegin(GL_LINES);
	glColor3f(1, 0, 0);
	glVertex3f(-20, 0, 0);
	glVertex3f(20, 0, 0);

	glColor3f(0, 1, 0);
	glVertex3f(0, 0, 0);
	glVertex3f(0, 21, 0);

	glColor3f(0, 0, 1);
	glVertex3f(0, 0, -25);
	glVertex3f(0, 0, 25);
	glEnd();
}

void setupLight()
{

	GLfloat	lightDiffuse[] = { 1.2f, 1.2f, 1.2f, 1.0f };
	GLfloat	lightSpecular[] = { 0, 0, 0, 1.0f };
	GLfloat	lightAmbient[] = { 0.4f, 0.4f, 0.4f, 1.0f };

	GLfloat light_position[] = { 20.0f, 20.0f, 20.0f, 0.0f };
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse);
	glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient);
	glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular);

	GLfloat light_position1[] = { -20.0f, -20.0f, -20.0f, 0.0f };
	glLightfv(GL_LIGHT1, GL_POSITION, light_position1);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, lightDiffuse);
	glLightfv(GL_LIGHT1, GL_AMBIENT, lightAmbient);
	glLightfv(GL_LIGHT1, GL_SPECULAR, lightSpecular);

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHT1);
	glShadeModel(GL_SMOOTH);
}

void setupMaterial(float ambient[], float diffuse[], float specular[], float shiness)
{
	glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, ambient);
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, diffuse);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, specular);
	glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, shiness);
}

void drawChande()
{
	glPushMatrix();
	glTranslatef(0, 0.18, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 1.0, 0.0, 0.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) chande.Draw();
	else chande.DrawWireframe();
	glPopMatrix();
}

void drawRay1()
{
	glPushMatrix();
	glTranslatef(-0.25 * 3, 2 + 0.18 * 2, 0);
	glRotatef(-90, 0, 0, 1);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 0.0, 0.0, 1.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) ray1.Draw();
	else ray1.DrawWireframe();
	glPopMatrix();
}

void drawRay2()
{
	glPushMatrix();
	glTranslatef(0.25 * 3, 2 + 0.18 * 2, 0);
	glRotatef(90, 0, 0, 1);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 0.0, 0.0, 1.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) ray2.Draw();
	else ray2.DrawWireframe();
	glPopMatrix();
}

void drawTamtruot1()
{
	glPushMatrix();
	glTranslatef(-0.25, minRayPosY, 0);
	glRotatef(90, 0, 0, 1);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 0.0, 1.0, 0.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) tamtruot1.Draw();
	else tamtruot1.DrawWireframe();
	glPopMatrix();
}

void drawTamtruot2()
{
	glPushMatrix();
	glTranslatef(0.25, minRayPosY, 0);
	glRotatef(-90, 0, 0, 1);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 0.0, 1.0, 0.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) tamtruot2.Draw();
	else tamtruot2.DrawWireframe();
	glPopMatrix();
}

void drawButve1()
{
	glPushMatrix();
	glTranslatef(0, butve1PosY, 0.6);
	glRotatef(-90, 1, 0, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 1.0, 1.0, 0.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) butve1.Draw();
	else butve1.DrawWireframe();
	glPopMatrix();
}

void drawButve2()
{
	glPushMatrix();
	glTranslatef(0, butve2PosY, 0.6);
	//glRotated(butve2Angle, 0, 0, 1);
	//glTranslatef(-1.5 + 0.2, 0, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 1.0, 1.0, 0.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) butve2.Draw();
	else butve2.DrawWireframe();
	glPopMatrix();
}

void drawButve3()
{
	glPushMatrix();
	glTranslatef(1.5 * 0.96 - 0.2, butve2PosY, 0.6 + 0.1 * 2);
	glRotatef(90, 1, 0, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 1.0, 0.0, 0.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) butve3.Draw();
	else butve3.DrawWireframe();
	glPopMatrix();
}

void drawChot1()
{
	glPushMatrix();
	glTranslatef(0, chot1PosY, 0.1);
	glRotatef(90, 1, 0, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 1.0, 0.0, 0.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) chot1.Draw();
	else chot1.DrawWireframe();
	glPopMatrix();
}

void drawThanhlienket()
{
	glPushMatrix();
	glTranslatef(0, butve2PosY, -0.5);
	//glRotated(butve2Angle, 0, 0, 1);
	//glTranslatef(-1.1 + 0.2, 0, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 0.3, 0.3, 0.3, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) thanhlienket.Draw();
	else thanhlienket.DrawWireframe();
	glPopMatrix();
}

void drawChot2()
{
	glPushMatrix();
	glTranslatef(0, 2.25, -0.6);
	glRotatef(90, 1, 0, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 1.0, 0.0, 0.0, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) chot2.Draw();
	else chot2.DrawWireframe();
	glPopMatrix();
}

void drawGiado1()
{
	glPushMatrix();
	glTranslatef(0, 2.25, -0.85);
	glRotatef(90, 1, 0, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 0.7, 0.45, 0.17, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) giado1.Draw();
	else giado1.DrawWireframe();
	glPopMatrix();
}

void drawGiado2()
{
	glPushMatrix();
	glTranslatef(0, 0.82 + 0.18 * 2, -0.85);
	glRotatef(90, 1, 0, 0);
	glRotatef(90, 0, 1, 0);

	GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat diffuse[] = { 0.7, 0.45, 0.17, 1.0 };
	GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat shininess = 5.0;
	setupMaterial(ambient, diffuse, specular, shininess);

	if (isColor) giado2.Draw();
	else giado2.DrawWireframe();
	glPopMatrix();
}

void drawRectangle(float centerX, float centerZ, float width,
	float height, float red, float green, float blue)
{
	glBegin(GL_POLYGON);
	glColor4f(red, green, blue, 1.0);
	glVertex3f(centerX + width / 2, 0, -(centerZ + height / 2));
	glVertex3f(-(centerX + width / 2), 0, -(centerZ + height / 2));
	glVertex3f(-(centerX + width / 2), 0, centerZ + height / 2);
	glVertex3f(centerX + width / 2, 0, centerZ + height / 2);
	glEnd();
}

void drawTriangles(float size, float red, float green, float blue)
{
	glBegin(GL_TRIANGLES);
	glColor4f(red, green, blue, 1.0);

	glVertex3f(0, 0, 0);
	glVertex3f(-size, 0, -size);
	glVertex3f(-size, 0, size);

	glVertex3f(0, 0, 0);
	glVertex3f(size, 0, -size);
	glVertex3f(size, 0, size);
	glEnd();
}

void drawTriangle(float size, float red, float green, float blue)
{
	glBegin(GL_POLYGON);
	glColor4f(red, green, blue, 1.0);

	glVertex3f(0, 0, 0);
	glVertex3f(-size, 0, -size);
	glVertex3f(-size, 0, size);
	glEnd();
}

void drawAnh()
{
	glPushMatrix();
	drawRectangle(0, 0, 0.5, 0.5, 0.5, 0.5, 0.5);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.5, 0, 0.5);
	drawRectangle(0, 0, 0.5, 0.5, 1, 0.5, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.5, 0, 0.5);
	drawRectangle(0, 0, 0.5, 0.5, 1, 0.5, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.5, 0, -0.5);
	drawRectangle(0, 0, 0.5, 0.5, 1, 0.5, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.5, 0, -0.5);
	drawRectangle(0, 0, 0.5, 0.5, 1, 0.5, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0, 0, -0.5);
	drawTriangles(0.25, 0.4, 0, 0.2);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0, 0, 0.5);
	drawTriangles(0.25, 0.4, 0, 0.2);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.5, 0, 0);
	glRotatef(90, 0, 1, 0);
	drawTriangles(0.25, 0.4, 0, 0.2);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.5, 0, 0);
	glRotatef(90, 0, 1, 0);
	drawTriangles(0.25, 0.4, 0, 0.2);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.5, 0, 0);
	drawTriangle(0.25, 1, 0.5, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0, 0, -0.5);
	glRotatef(-90, 0, 1, 0);
	drawTriangle(0.25, 1, 0.5, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0, 0, 0.5);
	glRotatef(90, 0, 1, 0);
	drawTriangle(0.25, 1, 0.5, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.5, 0, 0);
	glRotatef(180, 0, 0, 1);
	drawTriangle(0.25, 1, 0.5, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.875, 0, 0.875);
	drawRectangle(0, 0, 0.25, 0.25, 0, 0, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.875, 0, -0.875);
	drawRectangle(0, 0, 0.25, 0.25, 0, 0, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.875, 0, 0.875);
	drawRectangle(0, 0, 0.25, 0.25, 0, 0, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.875, 0, -0.875);
	drawRectangle(0, 0, 0.25, 0.25, 0, 0, 0);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.875, 0, 0);
	drawRectangle(0, 0, 0.25, 1.5, 0.5, 0.5, 0.5);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-0.875, 0, 0);
	drawRectangle(0, 0, 0.25, 1.5, 0.5, 0.5, 0.5);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0, 0, 0.875);
	glRotatef(90, 0, 1, 0);
	drawRectangle(0, 0, 0.25, 1.5, 0.5, 0.5, 0.5);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0, 0, -0.875);
	glRotatef(90, 0, 1, 0);
	drawRectangle(0, 0, 0.25, 1.5, 0.5, 0.5, 0.5);
	glPopMatrix();

}

void drawSan()
{
	glDisable(GL_LIGHTING);
	for (int x = -20; x < 20; x += 2)
		for (int z = -20; z < 20; z += 2)
		{
			glPushMatrix();
			glTranslatef(x, 0, z);
			drawAnh();
			glPopMatrix();
		}
	glEnable(GL_LIGHTING);
}

void calculatePosition(float& xPrevious, float& yPrevious, int direction)
{
	float x = (xPrevious - centerXEllipse) / radiusX;
	float y = (yPrevious - centerYEllipse) / radiusY;
	butve2Angle -= direction * 0.7;
	xPrevious = (cos(0.7 * M_PI / 180) * x - sin(direction * 0.7 * M_PI / 180) * y) * radiusX + centerXEllipse;
	yPrevious = (sin(direction * 0.7 * M_PI / 180) * x + cos(0.7 * M_PI / 180) * y) * radiusY + centerYEllipse;
}

void DrawEllipse(float centerX, float centerY, float centerZ, float radiusX, float radiusY, int nSegment)
{
	float incAngle = 2 * M_PI / nSegment;
	float t;

	float x = 0;//we start at angle = 0 
	float y = 1;

	glBegin(GL_LINE_LOOP);
	for (int i = 0; i < nSegment; i++)
	{
		glVertex3f(x * radiusX + centerX, y * radiusY + centerY, centerZ);//output vertex 
		t = x;
		x = cos(incAngle) * x - sin(incAngle) * y;
		y = sin(incAngle) * t + cos(incAngle) * y;
	}
	glEnd();
}

void myDisplay()
{
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	camera_X = camera_dis * sinf(camera_angle * PI / 180);
	camera_Y = camera_height;
	camera_Z = camera_dis * cosf(camera_angle * PI / 180);

	if (isViewing) gluLookAt(camera_X, camera_Y, camera_Z, 0, 0, 0, 0, 1, 0);
	else gluLookAt(0, 20, 0, 0, 0, 0, 0, 0, -1);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glViewport(0, -380, 1000, 1000);

	drawChande();
	drawRay1();
	drawRay2();
	drawButve1();

	glPushMatrix();
	glTranslatef(0, butve2PosY, 0);
	glRotatef(-butve2Angle, 0, 0, 1);
	glTranslatef(1.5 - 0.2, -butve2PosY, 0);
	drawButve2();
	drawButve3();
	glPopMatrix();

	drawChot1();
	drawChot2();
	drawThanhlienket();
	drawTamtruot1();
	drawTamtruot2();
	drawGiado1();
	drawGiado2();

	DrawEllipse(centerXEllipse, centerYEllipse, centerZEllipse, radiusX, radiusY, 100);

	drawSan();

	glFlush();
	glutSwapBuffers();
}

void mySpecialFunc(int key, int x, int y)
{
	if (key == GLUT_KEY_LEFT)
		camera_angle = camera_angle + 1;
	else if (key == GLUT_KEY_RIGHT)
		camera_angle = camera_angle - 1;
	else if (key == GLUT_KEY_UP)
		camera_height = camera_height + 0.25;
	else if (key == GLUT_KEY_DOWN)
		camera_height = camera_height - 0.25;

	glutPostRedisplay();
}

boolean isEqual(double a, double b)
{
	if (abs(a - b) < 1e-5) return true;
	else return false;
}

void myNormalFunc(unsigned char key, int x, int y)
{
	if (key == 'w' || key == 'W')
		isColor = !isColor;
	else if (key == 'v' || key == 'V')
		isViewing = !isViewing;
	else if (key == '2' && minRayPosY > 0.96)
	{
		int direction = !isEqual(butve3X, 0) && butve3X > 0 ? 1 : -1;
		minRayPosY -= 0.01;
		chot1PosY -= 0.01;
		butve1PosY -= 0.01;
		butve2PosY -= 0.01;
		butve2Angle -= direction * 180.0 / 254;

	}
	else if (key == '1' && minRayPosY < 3.51)
	{
		int direction = butve3X > 0 || isEqual(butve3X, 0) ? -1 : 1;
		minRayPosY += 0.01;
		chot1PosY += 0.01;
		butve1PosY += 0.01;
		butve2PosY += 0.01;
		butve2Angle -= direction * 180.0 / 254;
	}
	else if (key == '-')
		camera_dis = camera_dis - 0.25;
	else if (key == '+')
		camera_dis = camera_dis + 0.25;

	glutPostRedisplay();
}

void myInit()
{
	camera_angle = -25;
	camera_height = 3.5;
	camera_dis = 16.25;

	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

	glFrontFace(GL_CCW);
	glEnable(GL_DEPTH_TEST);

	setupLight();

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glFrustum(-0.5, 0.5, -0.5, 0.5, 1, 1000);
}

void createAll() {
	//chan de
	chande.CreateCuboid(3.1, 0.18, 1.1);
	chande.SetColor(0);
	chande.CalculateFacesNorm();
	// ray 1
	ray1.CreateShape1(2, 0.25, 0.25);
	ray1.SetColor(2);
	ray1.CalculateFacesNorm();
	// ray 2
	ray2.CreateShape1(2, 0.25, 0.25);
	ray2.SetColor(2);
	ray2.CalculateFacesNorm();
	// tam truot 1
	tamtruot1.CreateShape2(0.6, 0.25, 0.25);
	tamtruot1.SetColor(1);
	tamtruot1.CalculateFacesNorm();
	// tam truot 2
	tamtruot2.CreateShape2(0.6, 0.25, 0.25);
	tamtruot2.SetColor(1);
	tamtruot2.CalculateFacesNorm();
	// But ve 1
	butve1.CreateCylinderWithHole(20, 0.2, 0.35, 0.16);
	butve1.SetColor(3);
	butve1.CalculateFacesNorm();
	// But ve 2
	butve2.CreateCuboid(1.5, 0.19, 0.1);
	butve2.SetColor(3);
	butve2.CalculateFacesNorm();
	// But ve 3
	butve3.CreateShape3(20, 0.3, 0.1, 0.09);
	butve3.SetColor(0);
	butve3.CalculateFacesNorm();
	// Chot 1
	chot1.CreateCylinder(20, 1.8, 0.16);
	chot1.SetColor(0);
	chot1.CalculateFacesNorm();
	// Thanh lien ket
	thanhlienket.CreateCuboid(1.1, 0.2, 0.14);
	thanhlienket.SetColor(6);
	thanhlienket.CalculateFacesNorm();
	// Chot 2
	chot2.CreateCylinder(20, 0.7, 0.11);
	chot2.SetColor(0);
	chot2.CalculateFacesNorm();
	// Gia do 1
	giado1.CreateShape4(20, 1.5, 0.11, 1.9, 0.13, 0.25);
	giado1.SetColor(9);
	giado1.CalculateFacesNorm();
	// Gia do 2
	giado2.CreateCuboid(0.82, 0.13, 0.3);
	giado2.SetColor(9);
	giado2.CalculateFacesNorm();
}

int main(int argc, char* argv[])
{
	cout << "1     : Di chuyen tam truot len tren" << endl;
	cout << "2     : Di chuyen tam truot xuong duoi" << endl;
	cout << "W, w  : Chuyen doi qua lai giua che do khung day va to mau" << endl;
	cout << "V, v  : Chuyen doi qua lai giua che do 2D va 3D" << endl;
	cout << "A, a  : Bat/tat che do hoat hinh" << endl;
	cout << "+     : Tang khoang cach camera" << endl;
	cout << "-     : Giam khoang cach camera" << endl;
	cout << "up arrow  : Tang khoang cach camera" << endl;
	cout << "down arrow: Giam khoang cach camera" << endl;
	cout << "<-    : Quay camera theo chieu kim dong ho" << endl;
	cout << "->    : Quay camera nguoc chieu kim dong ho" << endl;
	glutInit(&argc, (char**)argv); //initialize the tool kit
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);//set the display mode
	glutInitWindowSize(screenWidth, screenHeight); //set window size
	glutInitWindowPosition(300, 200); // set window position on screen
	glutCreateWindow("Luu Truong Giang - 1913186"); // open the screen window

	myInit();

	createAll();
	glutSpecialFunc(mySpecialFunc);
	glutKeyboardFunc(myNormalFunc);
	glutDisplayFunc(myDisplay);
	glutMainLoop();
	return 0;
}
